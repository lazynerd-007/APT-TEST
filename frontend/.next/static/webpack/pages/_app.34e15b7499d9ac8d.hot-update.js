"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/services/authService.ts":
/*!*************************************!*\
  !*** ./src/services/authService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setUpdatePasswordFunction: function() { return /* binding */ setUpdatePasswordFunction; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var _apiClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apiClient */ \"./src/services/apiClient.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ \"./src/config.ts\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\n\n\nconst API_ENDPOINT = \"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth\");\n// Simulated database of valid users\nconst VALID_USERS = [\n    \"admin@example.com\",\n    \"babsodunewu@gmail.com\",\n    \"employer@bluapt.com\"\n];\n// Store the updatePassword function when it's provided\nlet updatePasswordFn = null;\n// Function to set the updatePassword function from AuthContext\nconst setUpdatePasswordFunction = (fn)=>{\n    updatePasswordFn = fn;\n};\n// Safe access to window object\nconst getWindow = ()=>{\n    return  true ? window : 0;\n};\n// Generate a valid token for Django REST Framework\nconst generateValidToken = (email)=>{\n    // This is still a demo token, but structured to look like a Django REST Framework token\n    // Real tokens would be generated by the backend\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 15);\n    // Format similar to Django REST Framework token (alphanumeric string)\n    return \"\".concat(Buffer.from(email).toString(\"base64\").replace(/=/g, \"\")).concat(random).concat(timestamp % 1000);\n};\nconst authService = {\n    /**\n   * Login with email and password\n   * @param email The user's email\n   * @param password The user's password\n   * @returns Promise with the login result\n   */ login: async (email, password)=>{\n        try {\n            // Try to call the real backend API first\n            try {\n                console.log(\"Attempting to authenticate with backend...\");\n                const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth/login/\"), {\n                    email,\n                    password\n                });\n                console.log(\"Backend authentication succeeded:\", response.data);\n                return response.data;\n            } catch (apiError) {\n                console.warn(\"Backend authentication failed, falling back to demo mode:\", apiError);\n                // Fall back to simulated login for development\n                // Simulate API delay\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n                // Check if it's a valid user email (for demo purposes)\n                if (VALID_USERS.includes(email.toLowerCase())) {\n                    console.log(\"Demo login successful for \".concat(email));\n                    // Generate a token in a format similar to what Django REST Framework would produce\n                    const token = generateValidToken(email);\n                    // Return user info\n                    return {\n                        token,\n                        user: {\n                            email,\n                            name: email.split(\"@\")[0],\n                            role: email.includes(\"admin\") ? \"admin\" : \"employer\"\n                        }\n                    };\n                } else {\n                    throw new Error(\"Invalid email or password\");\n                }\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Request a password reset email\n   * @param email The user's email address\n   * @returns Promise with the request result\n   */ requestPasswordReset: async (email)=>{\n        try {\n            // In a real implementation, this would call the backend API\n            // For demo purposes, we'll simulate a successful response\n            // Simulate API delay\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Check if it's a valid user email (for demo purposes)\n            if (VALID_USERS.includes(email.toLowerCase())) {\n                console.log(\"Password reset requested for \".concat(email, \". In a real app, an email would be sent.\"));\n                // In a real implementation, this would send an actual email\n                // For demo purposes, we'll just log the reset link to the console\n                const resetToken = Buffer.from(email + Date.now()).toString(\"base64\");\n                const win = getWindow();\n                const resetLink = win ? \"\".concat(win.location.origin, \"/reset-password?token=\").concat(resetToken) : \"/reset-password?token=\".concat(resetToken);\n                console.log(\"Reset link:\", resetLink);\n                console.log(\"Please use this link to reset your password (demo only)\");\n                return {\n                    success: true,\n                    message: \"If your email exists in our system, you will receive password reset instructions shortly. Please check your email and spam folder.\"\n                };\n            } else {\n                // For security reasons, don't reveal that the email doesn't exist\n                console.log(\"Password reset requested for non-existent user: \".concat(email));\n                return {\n                    success: true,\n                    message: \"If your email exists in our system, you will receive password reset instructions shortly. Please check your email and spam folder.\"\n                };\n            }\n        // Real implementation would be:\n        // const response = await apiClient.post(`/auth/reset-password/request`, { email });\n        // return response.data;\n        } catch (error) {\n            if (axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isAxiosError(error) && error.response) {\n                throw new Error(error.response.data.error || \"Failed to request password reset\");\n            }\n            throw new Error(\"Network error occurred\");\n        }\n    },\n    /**\n   * Reset password with token\n   * @param token The reset token from the email\n   * @param newPassword The new password\n   * @returns Promise with the reset result\n   */ resetPassword: async (token, newPassword)=>{\n        try {\n            // In a real implementation, this would call the backend API\n            // For demo purposes, we'll simulate a successful response\n            // Simulate API delay\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Decode the token to get the email (in a real app, this would be more secure)\n            try {\n                const decodedData = Buffer.from(token, \"base64\").toString();\n                const email = decodedData.split(new RegExp(\"[0-9]\"))[0]; // Extract email part\n                // Verify the email is valid\n                if (VALID_USERS.includes(email.toLowerCase())) {\n                    // Update the password using the function from AuthContext\n                    if (updatePasswordFn) {\n                        const updated = await updatePasswordFn(email, newPassword);\n                        if (updated) {\n                            return {\n                                success: true,\n                                message: \"Password has been successfully reset. You can now log in with your new password.\"\n                            };\n                        } else {\n                            return {\n                                success: false,\n                                message: \"Failed to update password. Please try again.\"\n                            };\n                        }\n                    } else {\n                        console.error(\"updatePasswordFn is not set\");\n                        return {\n                            success: false,\n                            message: \"System error: Password update function not available.\"\n                        };\n                    }\n                } else {\n                    return {\n                        success: false,\n                        message: \"Invalid or expired token\"\n                    };\n                }\n            } catch (e) {\n                return {\n                    success: false,\n                    message: \"Invalid or expired token\"\n                };\n            }\n        // Real implementation would be:\n        // const response = await apiClient.post(`/auth/reset-password/confirm`, { token, new_password: newPassword });\n        // return response.data;\n        } catch (error) {\n            if (axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isAxiosError(error) && error.response) {\n                throw new Error(error.response.data.error || \"Failed to reset password\");\n            }\n            throw new Error(\"Network error occurred\");\n        }\n    },\n    /**\n   * Test authentication\n   * @returns Promise with the test result\n   */ testAuth: async ()=>{\n        try {\n            const response = await _apiClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/users/test_auth/\");\n            console.log(\"Authentication test successful:\", response.data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Authentication test failed:\", error);\n            throw error;\n        }\n    },\n    // Login user\n    loginUser: async (credentials)=>{\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth/login/\"), credentials);\n            const user = response.data;\n            // Store user in localStorage\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            return user;\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    },\n    // Register user\n    registerUser: async (data)=>{\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/users/register/\"), data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            throw error;\n        }\n    },\n    // Logout user\n    logout: ()=>{\n        localStorage.removeItem(\"user\");\n    },\n    // Get current user from localStorage\n    getCurrentUser: ()=>{\n        const userStr = localStorage.getItem(\"user\");\n        if (userStr) {\n            return JSON.parse(userStr);\n        }\n        return null;\n    },\n    // Login as demo user\n    loginAsDemo: async ()=>{\n        try {\n            // First create/get the demo user\n            const createResponse = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/users/create_demo_user/\"));\n            // Then login with the demo credentials\n            const loginCredentials = {\n                email: \"demo.candidate@example.com\",\n                password: \"demopassword\"\n            };\n            const loginResponse = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth/login/\"), loginCredentials);\n            const user = loginResponse.data;\n            // Store user in localStorage\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            return user;\n        } catch (error) {\n            console.error(\"Demo login error:\", error);\n            throw error;\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (authService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NUMsT0FBT0E7UUFDVCxFQUFFLE9BQU9LLE9BQU87WUFDZGxCLFFBQVFrQixLQUFLLENBQUMscUJBQXFCQTtZQUNuQyxNQUFNQTtRQUNSO0lBQ0Y7QUFDRjtBQUVBLCtEQUFlckIsV0FBV0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvc2VydmljZXMvYXV0aFNlcnZpY2UudHM/NGRjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IGFwaUNsaWVudCBmcm9tICcuL2FwaUNsaWVudCc7XG5pbXBvcnQgeyBBUElfVVJMIH0gZnJvbSAnLi4vY29uZmlnJztcblxuY29uc3QgQVBJX0VORFBPSU5UID0gYCR7QVBJX1VSTH0vYXV0aGA7XG5cbi8vIFNpbXVsYXRlZCBkYXRhYmFzZSBvZiB2YWxpZCB1c2Vyc1xuY29uc3QgVkFMSURfVVNFUlMgPSBbXG4gICdhZG1pbkBleGFtcGxlLmNvbScsXG4gICdiYWJzb2R1bmV3dUBnbWFpbC5jb20nLFxuICAnZW1wbG95ZXJAYmx1YXB0LmNvbSdcbl07XG5cbi8vIFN0b3JlIHRoZSB1cGRhdGVQYXNzd29yZCBmdW5jdGlvbiB3aGVuIGl0J3MgcHJvdmlkZWRcbmxldCB1cGRhdGVQYXNzd29yZEZuOiAoKGVtYWlsOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj4pIHwgbnVsbCA9IG51bGw7XG5cbi8vIEZ1bmN0aW9uIHRvIHNldCB0aGUgdXBkYXRlUGFzc3dvcmQgZnVuY3Rpb24gZnJvbSBBdXRoQ29udGV4dFxuZXhwb3J0IGNvbnN0IHNldFVwZGF0ZVBhc3N3b3JkRnVuY3Rpb24gPSAoZm46IChlbWFpbDogc3RyaW5nLCBuZXdQYXNzd29yZDogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+KSA9PiB7XG4gIHVwZGF0ZVBhc3N3b3JkRm4gPSBmbjtcbn07XG5cbi8vIFNhZmUgYWNjZXNzIHRvIHdpbmRvdyBvYmplY3RcbmNvbnN0IGdldFdpbmRvdyA9ICgpID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogbnVsbDtcbn07XG5cbi8vIEdlbmVyYXRlIGEgdmFsaWQgdG9rZW4gZm9yIERqYW5nbyBSRVNUIEZyYW1ld29ya1xuY29uc3QgZ2VuZXJhdGVWYWxpZFRva2VuID0gKGVtYWlsOiBzdHJpbmcpID0+IHtcbiAgLy8gVGhpcyBpcyBzdGlsbCBhIGRlbW8gdG9rZW4sIGJ1dCBzdHJ1Y3R1cmVkIHRvIGxvb2sgbGlrZSBhIERqYW5nbyBSRVNUIEZyYW1ld29yayB0b2tlblxuICAvLyBSZWFsIHRva2VucyB3b3VsZCBiZSBnZW5lcmF0ZWQgYnkgdGhlIGJhY2tlbmRcbiAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KTtcbiAgXG4gIC8vIEZvcm1hdCBzaW1pbGFyIHRvIERqYW5nbyBSRVNUIEZyYW1ld29yayB0b2tlbiAoYWxwaGFudW1lcmljIHN0cmluZylcbiAgcmV0dXJuIGAke0J1ZmZlci5mcm9tKGVtYWlsKS50b1N0cmluZygnYmFzZTY0JykucmVwbGFjZSgvPS9nLCAnJyl9JHtyYW5kb219JHt0aW1lc3RhbXAgJSAxMDAwfWA7XG59O1xuXG4vLyBEZWZpbmUgdXNlciBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgVXNlciB7XG4gIGlkOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGZpcnN0X25hbWU6IHN0cmluZztcbiAgbGFzdF9uYW1lOiBzdHJpbmc7XG4gIHJvbGU6IHN0cmluZztcbiAgdG9rZW4/OiBzdHJpbmc7XG59XG5cbi8vIERlZmluZSBsb2dpbiBjcmVkZW50aWFscyBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgTG9naW5DcmVkZW50aWFscyB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG59XG5cbi8vIERlZmluZSByZWdpc3RyYXRpb24gZGF0YSBpbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgUmVnaXN0cmF0aW9uRGF0YSB7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG4gIGZpcnN0X25hbWU6IHN0cmluZztcbiAgbGFzdF9uYW1lOiBzdHJpbmc7XG4gIHJvbGU6IHN0cmluZztcbn1cblxuY29uc3QgYXV0aFNlcnZpY2UgPSB7XG4gIC8qKlxuICAgKiBMb2dpbiB3aXRoIGVtYWlsIGFuZCBwYXNzd29yZFxuICAgKiBAcGFyYW0gZW1haWwgVGhlIHVzZXIncyBlbWFpbFxuICAgKiBAcGFyYW0gcGFzc3dvcmQgVGhlIHVzZXIncyBwYXNzd29yZFxuICAgKiBAcmV0dXJucyBQcm9taXNlIHdpdGggdGhlIGxvZ2luIHJlc3VsdFxuICAgKi9cbiAgbG9naW46IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTx7IHRva2VuOiBzdHJpbmc7IHVzZXI6IGFueSB9PiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRyeSB0byBjYWxsIHRoZSByZWFsIGJhY2tlbmQgQVBJIGZpcnN0XG4gICAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZygnQXR0ZW1wdGluZyB0byBhdXRoZW50aWNhdGUgd2l0aCBiYWNrZW5kLi4uJyk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChgJHtBUElfVVJMfS9hdXRoL2xvZ2luL2AsIHtcbiAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICBwYXNzd29yZFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdCYWNrZW5kIGF1dGhlbnRpY2F0aW9uIHN1Y2NlZWRlZDonLCByZXNwb25zZS5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICB9IGNhdGNoIChhcGlFcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0JhY2tlbmQgYXV0aGVudGljYXRpb24gZmFpbGVkLCBmYWxsaW5nIGJhY2sgdG8gZGVtbyBtb2RlOicsIGFwaUVycm9yKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZhbGwgYmFjayB0byBzaW11bGF0ZWQgbG9naW4gZm9yIGRldmVsb3BtZW50XG4gICAgICAgIC8vIFNpbXVsYXRlIEFQSSBkZWxheVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBpdCdzIGEgdmFsaWQgdXNlciBlbWFpbCAoZm9yIGRlbW8gcHVycG9zZXMpXG4gICAgICAgIGlmIChWQUxJRF9VU0VSUy5pbmNsdWRlcyhlbWFpbC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBEZW1vIGxvZ2luIHN1Y2Nlc3NmdWwgZm9yICR7ZW1haWx9YCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gR2VuZXJhdGUgYSB0b2tlbiBpbiBhIGZvcm1hdCBzaW1pbGFyIHRvIHdoYXQgRGphbmdvIFJFU1QgRnJhbWV3b3JrIHdvdWxkIHByb2R1Y2VcbiAgICAgICAgICBjb25zdCB0b2tlbiA9IGdlbmVyYXRlVmFsaWRUb2tlbihlbWFpbCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUmV0dXJuIHVzZXIgaW5mb1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIHVzZXI6IHtcbiAgICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICAgIG5hbWU6IGVtYWlsLnNwbGl0KCdAJylbMF0sXG4gICAgICAgICAgICAgIHJvbGU6IGVtYWlsLmluY2x1ZGVzKCdhZG1pbicpID8gJ2FkbWluJyA6ICdlbXBsb3llcidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVxdWVzdCBhIHBhc3N3b3JkIHJlc2V0IGVtYWlsXG4gICAqIEBwYXJhbSBlbWFpbCBUaGUgdXNlcidzIGVtYWlsIGFkZHJlc3NcbiAgICogQHJldHVybnMgUHJvbWlzZSB3aXRoIHRoZSByZXF1ZXN0IHJlc3VsdFxuICAgKi9cbiAgcmVxdWVzdFBhc3N3b3JkUmVzZXQ6IGFzeW5jIChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZyB9PiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBjYWxsIHRoZSBiYWNrZW5kIEFQSVxuICAgICAgLy8gRm9yIGRlbW8gcHVycG9zZXMsIHdlJ2xsIHNpbXVsYXRlIGEgc3VjY2Vzc2Z1bCByZXNwb25zZVxuICAgICAgXG4gICAgICAvLyBTaW11bGF0ZSBBUEkgZGVsYXlcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGlmIGl0J3MgYSB2YWxpZCB1c2VyIGVtYWlsIChmb3IgZGVtbyBwdXJwb3NlcylcbiAgICAgIGlmIChWQUxJRF9VU0VSUy5pbmNsdWRlcyhlbWFpbC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgUGFzc3dvcmQgcmVzZXQgcmVxdWVzdGVkIGZvciAke2VtYWlsfS4gSW4gYSByZWFsIGFwcCwgYW4gZW1haWwgd291bGQgYmUgc2VudC5gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBzZW5kIGFuIGFjdHVhbCBlbWFpbFxuICAgICAgICAvLyBGb3IgZGVtbyBwdXJwb3Nlcywgd2UnbGwganVzdCBsb2cgdGhlIHJlc2V0IGxpbmsgdG8gdGhlIGNvbnNvbGVcbiAgICAgICAgY29uc3QgcmVzZXRUb2tlbiA9IEJ1ZmZlci5mcm9tKGVtYWlsICsgRGF0ZS5ub3coKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICBjb25zdCB3aW4gPSBnZXRXaW5kb3coKTtcbiAgICAgICAgY29uc3QgcmVzZXRMaW5rID0gd2luID8gYCR7d2luLmxvY2F0aW9uLm9yaWdpbn0vcmVzZXQtcGFzc3dvcmQ/dG9rZW49JHtyZXNldFRva2VufWAgOiBgL3Jlc2V0LXBhc3N3b3JkP3Rva2VuPSR7cmVzZXRUb2tlbn1gO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ1Jlc2V0IGxpbms6JywgcmVzZXRMaW5rKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1BsZWFzZSB1c2UgdGhpcyBsaW5rIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQgKGRlbW8gb25seSknKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICBtZXNzYWdlOiAnSWYgeW91ciBlbWFpbCBleGlzdHMgaW4gb3VyIHN5c3RlbSwgeW91IHdpbGwgcmVjZWl2ZSBwYXNzd29yZCByZXNldCBpbnN0cnVjdGlvbnMgc2hvcnRseS4gUGxlYXNlIGNoZWNrIHlvdXIgZW1haWwgYW5kIHNwYW0gZm9sZGVyLidcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBzZWN1cml0eSByZWFzb25zLCBkb24ndCByZXZlYWwgdGhhdCB0aGUgZW1haWwgZG9lc24ndCBleGlzdFxuICAgICAgICBjb25zb2xlLmxvZyhgUGFzc3dvcmQgcmVzZXQgcmVxdWVzdGVkIGZvciBub24tZXhpc3RlbnQgdXNlcjogJHtlbWFpbH1gKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSwgLy8gU3RpbGwgcmV0dXJuIHN1Y2Nlc3MgZm9yIHNlY3VyaXR5XG4gICAgICAgICAgbWVzc2FnZTogJ0lmIHlvdXIgZW1haWwgZXhpc3RzIGluIG91ciBzeXN0ZW0sIHlvdSB3aWxsIHJlY2VpdmUgcGFzc3dvcmQgcmVzZXQgaW5zdHJ1Y3Rpb25zIHNob3J0bHkuIFBsZWFzZSBjaGVjayB5b3VyIGVtYWlsIGFuZCBzcGFtIGZvbGRlci4nXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFJlYWwgaW1wbGVtZW50YXRpb24gd291bGQgYmU6XG4gICAgICAvLyBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5wb3N0KGAvYXV0aC9yZXNldC1wYXNzd29yZC9yZXF1ZXN0YCwgeyBlbWFpbCB9KTtcbiAgICAgIC8vIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoYXhpb3MuaXNBeGlvc0Vycm9yKGVycm9yKSAmJiBlcnJvci5yZXNwb25zZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IucmVzcG9uc2UuZGF0YS5lcnJvciB8fCAnRmFpbGVkIHRvIHJlcXVlc3QgcGFzc3dvcmQgcmVzZXQnKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignTmV0d29yayBlcnJvciBvY2N1cnJlZCcpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVzZXQgcGFzc3dvcmQgd2l0aCB0b2tlblxuICAgKiBAcGFyYW0gdG9rZW4gVGhlIHJlc2V0IHRva2VuIGZyb20gdGhlIGVtYWlsXG4gICAqIEBwYXJhbSBuZXdQYXNzd29yZCBUaGUgbmV3IHBhc3N3b3JkXG4gICAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCB0aGUgcmVzZXQgcmVzdWx0XG4gICAqL1xuICByZXNldFBhc3N3b3JkOiBhc3luYyAodG9rZW46IHN0cmluZywgbmV3UGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuOyBtZXNzYWdlOiBzdHJpbmcgfT4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgY2FsbCB0aGUgYmFja2VuZCBBUElcbiAgICAgIC8vIEZvciBkZW1vIHB1cnBvc2VzLCB3ZSdsbCBzaW11bGF0ZSBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcbiAgICAgIFxuICAgICAgLy8gU2ltdWxhdGUgQVBJIGRlbGF5XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuICAgICAgXG4gICAgICAvLyBEZWNvZGUgdGhlIHRva2VuIHRvIGdldCB0aGUgZW1haWwgKGluIGEgcmVhbCBhcHAsIHRoaXMgd291bGQgYmUgbW9yZSBzZWN1cmUpXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkZWNvZGVkRGF0YSA9IEJ1ZmZlci5mcm9tKHRva2VuLCAnYmFzZTY0JykudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgZW1haWwgPSBkZWNvZGVkRGF0YS5zcGxpdChuZXcgUmVnRXhwKCdbMC05XScpKVswXTsgLy8gRXh0cmFjdCBlbWFpbCBwYXJ0XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZnkgdGhlIGVtYWlsIGlzIHZhbGlkXG4gICAgICAgIGlmIChWQUxJRF9VU0VSUy5pbmNsdWRlcyhlbWFpbC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcGFzc3dvcmQgdXNpbmcgdGhlIGZ1bmN0aW9uIGZyb20gQXV0aENvbnRleHRcbiAgICAgICAgICBpZiAodXBkYXRlUGFzc3dvcmRGbikge1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IHVwZGF0ZVBhc3N3b3JkRm4oZW1haWwsIG5ld1Bhc3N3b3JkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXNzd29yZCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgcmVzZXQuIFlvdSBjYW4gbm93IGxvZyBpbiB3aXRoIHlvdXIgbmV3IHBhc3N3b3JkLidcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgcGFzc3dvcmQuIFBsZWFzZSB0cnkgYWdhaW4uJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCd1cGRhdGVQYXNzd29yZEZuIGlzIG5vdCBzZXQnKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICBtZXNzYWdlOiAnU3lzdGVtIGVycm9yOiBQYXNzd29yZCB1cGRhdGUgZnVuY3Rpb24gbm90IGF2YWlsYWJsZS4nXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBvciBleHBpcmVkIHRva2VuJ1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBvciBleHBpcmVkIHRva2VuJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBSZWFsIGltcGxlbWVudGF0aW9uIHdvdWxkIGJlOlxuICAgICAgLy8gY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlDbGllbnQucG9zdChgL2F1dGgvcmVzZXQtcGFzc3dvcmQvY29uZmlybWAsIHsgdG9rZW4sIG5ld19wYXNzd29yZDogbmV3UGFzc3dvcmQgfSk7XG4gICAgICAvLyByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGF4aW9zLmlzQXhpb3NFcnJvcihlcnJvcikgJiYgZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLnJlc3BvbnNlLmRhdGEuZXJyb3IgfHwgJ0ZhaWxlZCB0byByZXNldCBwYXNzd29yZCcpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZXR3b3JrIGVycm9yIG9jY3VycmVkJyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBUZXN0IGF1dGhlbnRpY2F0aW9uXG4gICAqIEByZXR1cm5zIFByb21pc2Ugd2l0aCB0aGUgdGVzdCByZXN1bHRcbiAgICovXG4gIHRlc3RBdXRoOiBhc3luYyAoKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGlDbGllbnQuZ2V0KCcvdXNlcnMvdGVzdF9hdXRoLycpO1xuICAgICAgY29uc29sZS5sb2coJ0F1dGhlbnRpY2F0aW9uIHRlc3Qgc3VjY2Vzc2Z1bDonLCByZXNwb25zZS5kYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBdXRoZW50aWNhdGlvbiB0ZXN0IGZhaWxlZDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTG9naW4gdXNlclxuICBsb2dpblVzZXI6IGFzeW5jIChjcmVkZW50aWFsczogTG9naW5DcmVkZW50aWFscyk6IFByb21pc2U8VXNlcj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoYCR7QVBJX1VSTH0vYXV0aC9sb2dpbi9gLCBjcmVkZW50aWFscyk7XG4gICAgICBjb25zdCB1c2VyID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgIFxuICAgICAgLy8gU3RvcmUgdXNlciBpbiBsb2NhbFN0b3JhZ2VcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xuICAgICAgXG4gICAgICByZXR1cm4gdXNlcjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignTG9naW4gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgLy8gUmVnaXN0ZXIgdXNlclxuICByZWdpc3RlclVzZXI6IGFzeW5jIChkYXRhOiBSZWdpc3RyYXRpb25EYXRhKTogUHJvbWlzZTxVc2VyPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChgJHtBUElfVVJMfS91c2Vycy9yZWdpc3Rlci9gLCBkYXRhKTtcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdSZWdpc3RyYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9LFxuICBcbiAgLy8gTG9nb3V0IHVzZXJcbiAgbG9nb3V0OiAoKTogdm9pZCA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTtcbiAgfSxcbiAgXG4gIC8vIEdldCBjdXJyZW50IHVzZXIgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgZ2V0Q3VycmVudFVzZXI6ICgpOiBVc2VyIHwgbnVsbCA9PiB7XG4gICAgY29uc3QgdXNlclN0ciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XG4gICAgaWYgKHVzZXJTdHIpIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHVzZXJTdHIpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgXG4gIC8vIExvZ2luIGFzIGRlbW8gdXNlclxuICBsb2dpbkFzRGVtbzogYXN5bmMgKCk6IFByb21pc2U8VXNlcj4gPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGaXJzdCBjcmVhdGUvZ2V0IHRoZSBkZW1vIHVzZXJcbiAgICAgIGNvbnN0IGNyZWF0ZVJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChgJHtBUElfVVJMfS91c2Vycy9jcmVhdGVfZGVtb191c2VyL2ApO1xuICAgICAgXG4gICAgICAvLyBUaGVuIGxvZ2luIHdpdGggdGhlIGRlbW8gY3JlZGVudGlhbHNcbiAgICAgIGNvbnN0IGxvZ2luQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgIGVtYWlsOiAnZGVtby5jYW5kaWRhdGVAZXhhbXBsZS5jb20nLFxuICAgICAgICBwYXNzd29yZDogJ2RlbW9wYXNzd29yZCdcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IGxvZ2luUmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KGAke0FQSV9VUkx9L2F1dGgvbG9naW4vYCwgbG9naW5DcmVkZW50aWFscyk7XG4gICAgICBjb25zdCB1c2VyID0gbG9naW5SZXNwb25zZS5kYXRhO1xuICAgICAgXG4gICAgICAvLyBTdG9yZSB1c2VyIGluIGxvY2FsU3RvcmFnZVxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgICBcbiAgICAgIHJldHVybiB1c2VyO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEZW1vIGxvZ2luIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgYXV0aFNlcnZpY2U7ICJdLCJuYW1lcyI6WyJheGlvcyIsImFwaUNsaWVudCIsIkFQSV9VUkwiLCJBUElfRU5EUE9JTlQiLCJWQUxJRF9VU0VSUyIsInVwZGF0ZVBhc3N3b3JkRm4iLCJzZXRVcGRhdGVQYXNzd29yZEZ1bmN0aW9uIiwiZm4iLCJnZXRXaW5kb3ciLCJ3aW5kb3ciLCJnZW5lcmF0ZVZhbGlkVG9rZW4iLCJlbWFpbCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJyYW5kb20iLCJNYXRoIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJCdWZmZXIiLCJmcm9tIiwicmVwbGFjZSIsImF1dGhTZXJ2aWNlIiwibG9naW4iLCJwYXNzd29yZCIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsInBvc3QiLCJkYXRhIiwiYXBpRXJyb3IiLCJ3YXJuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaW5jbHVkZXMiLCJ0b0xvd2VyQ2FzZSIsInRva2VuIiwidXNlciIsIm5hbWUiLCJzcGxpdCIsInJvbGUiLCJFcnJvciIsImVycm9yIiwicmVxdWVzdFBhc3N3b3JkUmVzZXQiLCJyZXNldFRva2VuIiwid2luIiwicmVzZXRMaW5rIiwibG9jYXRpb24iLCJvcmlnaW4iLCJzdWNjZXNzIiwibWVzc2FnZSIsImlzQXhpb3NFcnJvciIsInJlc2V0UGFzc3dvcmQiLCJuZXdQYXNzd29yZCIsImRlY29kZWREYXRhIiwiUmVnRXhwIiwidXBkYXRlZCIsImUiLCJ0ZXN0QXV0aCIsImdldCIsImxvZ2luVXNlciIsImNyZWRlbnRpYWxzIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZWdpc3RlclVzZXIiLCJsb2dvdXQiLCJyZW1vdmVJdGVtIiwiZ2V0Q3VycmVudFVzZXIiLCJ1c2VyU3RyIiwiZ2V0SXRlbSIsInBhcnNlIiwibG9naW5Bc0RlbW8iLCJjcmVhdGVSZXNwb25zZSIsImxvZ2luQ3JlZGVudGlhbHMiLCJsb2dpblJlc3BvbnNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/services/authService.ts\n"));

/***/ })

});