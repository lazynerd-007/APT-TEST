"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/services/authService.ts":
/*!*************************************!*\
  !*** ./src/services/authService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setUpdatePasswordFunction: function() { return /* binding */ setUpdatePasswordFunction; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var _apiClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apiClient */ \"./src/services/apiClient.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config */ \"./src/config.ts\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\n\n\nconst API_ENDPOINT = \"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth\");\n// Simulated database of valid users\nconst VALID_USERS = [\n    \"admin@example.com\",\n    \"babsodunewu@gmail.com\",\n    \"employer@bluapt.com\"\n];\n// Store the updatePassword function when it's provided\nlet updatePasswordFn = null;\n// Function to set the updatePassword function from AuthContext\nconst setUpdatePasswordFunction = (fn)=>{\n    updatePasswordFn = fn;\n};\n// Safe access to window object\nconst getWindow = ()=>{\n    return  true ? window : 0;\n};\n// Generate a valid token for Django REST Framework\nconst generateValidToken = (email)=>{\n    // This is still a demo token, but structured to look like a Django REST Framework token\n    // Real tokens would be generated by the backend\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 15);\n    // Format similar to Django REST Framework token (alphanumeric string)\n    return \"\".concat(Buffer.from(email).toString(\"base64\").replace(/=/g, \"\")).concat(random).concat(timestamp % 1000);\n};\nconst authService = {\n    /**\n   * Login with email and password\n   * @param email The user's email\n   * @param password The user's password\n   * @returns Promise with the login result\n   */ login: async (email, password)=>{\n        try {\n            // Try to call the real backend API first\n            try {\n                console.log(\"Attempting to authenticate with backend...\");\n                const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth/login/\"), {\n                    email,\n                    password\n                });\n                console.log(\"Backend authentication succeeded:\", response.data);\n                return response.data;\n            } catch (apiError) {\n                console.warn(\"Backend authentication failed, falling back to demo mode:\", apiError);\n                // Fall back to simulated login for development\n                // Simulate API delay\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n                // Check if it's a valid user email (for demo purposes)\n                if (VALID_USERS.includes(email.toLowerCase())) {\n                    console.log(\"Demo login successful for \".concat(email));\n                    // Generate a token in a format similar to what Django REST Framework would produce\n                    const token = generateValidToken(email);\n                    // Return user info\n                    return {\n                        token,\n                        user: {\n                            email,\n                            name: email.split(\"@\")[0],\n                            role: email.includes(\"admin\") ? \"admin\" : \"employer\"\n                        }\n                    };\n                } else {\n                    throw new Error(\"Invalid email or password\");\n                }\n            }\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Request a password reset email\n   * @param email The user's email address\n   * @returns Promise with the request result\n   */ requestPasswordReset: async (email)=>{\n        try {\n            // In a real implementation, this would call the backend API\n            // For demo purposes, we'll simulate a successful response\n            // Simulate API delay\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Check if it's a valid user email (for demo purposes)\n            if (VALID_USERS.includes(email.toLowerCase())) {\n                console.log(\"Password reset requested for \".concat(email, \". In a real app, an email would be sent.\"));\n                // In a real implementation, this would send an actual email\n                // For demo purposes, we'll just log the reset link to the console\n                const resetToken = Buffer.from(email + Date.now()).toString(\"base64\");\n                const win = getWindow();\n                const resetLink = win ? \"\".concat(win.location.origin, \"/reset-password?token=\").concat(resetToken) : \"/reset-password?token=\".concat(resetToken);\n                console.log(\"Reset link:\", resetLink);\n                console.log(\"Please use this link to reset your password (demo only)\");\n                return {\n                    success: true,\n                    message: \"If your email exists in our system, you will receive password reset instructions shortly. Please check your email and spam folder.\"\n                };\n            } else {\n                // For security reasons, don't reveal that the email doesn't exist\n                console.log(\"Password reset requested for non-existent user: \".concat(email));\n                return {\n                    success: true,\n                    message: \"If your email exists in our system, you will receive password reset instructions shortly. Please check your email and spam folder.\"\n                };\n            }\n        // Real implementation would be:\n        // const response = await apiClient.post(`/auth/reset-password/request`, { email });\n        // return response.data;\n        } catch (error) {\n            if (axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isAxiosError(error) && error.response) {\n                throw new Error(error.response.data.error || \"Failed to request password reset\");\n            }\n            throw new Error(\"Network error occurred\");\n        }\n    },\n    /**\n   * Reset password with token\n   * @param token The reset token from the email\n   * @param newPassword The new password\n   * @returns Promise with the reset result\n   */ resetPassword: async (token, newPassword)=>{\n        try {\n            // In a real implementation, this would call the backend API\n            // For demo purposes, we'll simulate a successful response\n            // Simulate API delay\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // Decode the token to get the email (in a real app, this would be more secure)\n            try {\n                const decodedData = Buffer.from(token, \"base64\").toString();\n                const email = decodedData.split(new RegExp(\"[0-9]\"))[0]; // Extract email part\n                // Verify the email is valid\n                if (VALID_USERS.includes(email.toLowerCase())) {\n                    // Update the password using the function from AuthContext\n                    if (updatePasswordFn) {\n                        const updated = await updatePasswordFn(email, newPassword);\n                        if (updated) {\n                            return {\n                                success: true,\n                                message: \"Password has been successfully reset. You can now log in with your new password.\"\n                            };\n                        } else {\n                            return {\n                                success: false,\n                                message: \"Failed to update password. Please try again.\"\n                            };\n                        }\n                    } else {\n                        console.error(\"updatePasswordFn is not set\");\n                        return {\n                            success: false,\n                            message: \"System error: Password update function not available.\"\n                        };\n                    }\n                } else {\n                    return {\n                        success: false,\n                        message: \"Invalid or expired token\"\n                    };\n                }\n            } catch (e) {\n                return {\n                    success: false,\n                    message: \"Invalid or expired token\"\n                };\n            }\n        // Real implementation would be:\n        // const response = await apiClient.post(`/auth/reset-password/confirm`, { token, new_password: newPassword });\n        // return response.data;\n        } catch (error) {\n            if (axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isAxiosError(error) && error.response) {\n                throw new Error(error.response.data.error || \"Failed to reset password\");\n            }\n            throw new Error(\"Network error occurred\");\n        }\n    },\n    /**\n   * Test authentication\n   * @returns Promise with the test result\n   */ testAuth: async ()=>{\n        try {\n            const response = await _apiClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"/users/test_auth/\");\n            console.log(\"Authentication test successful:\", response.data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Authentication test failed:\", error);\n            throw error;\n        }\n    },\n    // Login user\n    loginUser: async (credentials)=>{\n        try {\n            console.log(\"Attempting to login with credentials:\", credentials);\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth/login/\"), credentials);\n            console.log(\"Login response:\", response.data);\n            const user = response.data;\n            // Store user in localStorage\n            localStorage.setItem(\"user\", JSON.stringify(user));\n            return user;\n        } catch (error) {\n            console.error(\"Login error:\", error);\n            throw error;\n        }\n    },\n    // Register user\n    registerUser: async (data)=>{\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/users/register/\"), data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            throw error;\n        }\n    },\n    // Logout user\n    logout: ()=>{\n        localStorage.removeItem(\"user\");\n    },\n    // Get current user from localStorage\n    getCurrentUser: ()=>{\n        const userStr = localStorage.getItem(\"user\");\n        if (userStr) {\n            return JSON.parse(userStr);\n        }\n        return null;\n    },\n    // Login as demo user\n    loginAsDemo: async ()=>{\n        try {\n            // Use the demo credentials directly\n            const loginCredentials = {\n                email: \"demo.candidate@example.com\",\n                password: \"demopassword\"\n            };\n            // Try to login with the demo credentials\n            try {\n                const loginResponse = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth/login/\"), loginCredentials);\n                const user = loginResponse.data;\n                // Store user in localStorage\n                localStorage.setItem(\"user\", JSON.stringify(user));\n                return user;\n            } catch (loginError) {\n                // If login fails, try to create the demo user first\n                console.log(\"Demo login failed, trying to create demo user first...\");\n                await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/users/create_demo_user/\"));\n                // Then try to login again\n                const loginResponse = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(\"\".concat(_config__WEBPACK_IMPORTED_MODULE_1__.API_URL, \"/auth/login/\"), loginCredentials);\n                const user = loginResponse.data;\n                // Store user in localStorage\n                localStorage.setItem(\"user\", JSON.stringify(user));\n                return user;\n            }\n        } catch (error) {\n            console.error(\"Demo login error:\", error);\n            throw error;\n        }\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (authService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/authService.ts\n"));

/***/ })

});